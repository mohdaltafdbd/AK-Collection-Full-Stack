{"ast":null,"code":"'use strict';\n\nconst MinipassPipeline = require('minipass-pipeline');\nclass CachingMinipassPipeline extends MinipassPipeline {\n  #events = [];\n  #data = new Map();\n  constructor(opts) {\n    // CRITICAL: do NOT pass the streams to the call to super(), this will start\n    // the flow of data and potentially cause the events we need to catch to emit\n    // before we've finished our own setup. instead we call super() with no args,\n    // finish our setup, and then push the streams into ourselves to start the\n    // data flow\n    super();\n    this.#events = opts.events;\n\n    /* istanbul ignore next - coverage disabled because this is pointless to test here */\n    for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      streams[_key - 1] = arguments[_key];\n    }\n    if (streams.length) {\n      this.push(...streams);\n    }\n  }\n  on(event, handler) {\n    if (this.#events.includes(event) && this.#data.has(event)) {\n      return handler(...this.#data.get(event));\n    }\n    return super.on(event, handler);\n  }\n  emit(event) {\n    for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      data[_key2 - 1] = arguments[_key2];\n    }\n    if (this.#events.includes(event)) {\n      this.#data.set(event, data);\n    }\n    return super.emit(event, ...data);\n  }\n}\nmodule.exports = CachingMinipassPipeline;","map":{"version":3,"names":["MinipassPipeline","require","CachingMinipassPipeline","events","data","Map","constructor","opts","streams","length","push","on","event","handler","includes","has","get","emit","set","module","exports"],"sources":["/Users/altafziya/Desktop/new project/ak collection/frontend/node_modules/make-fetch-happen/lib/pipeline.js"],"sourcesContent":["'use strict'\n\nconst MinipassPipeline = require('minipass-pipeline')\n\nclass CachingMinipassPipeline extends MinipassPipeline {\n  #events = []\n  #data = new Map()\n\n  constructor (opts, ...streams) {\n    // CRITICAL: do NOT pass the streams to the call to super(), this will start\n    // the flow of data and potentially cause the events we need to catch to emit\n    // before we've finished our own setup. instead we call super() with no args,\n    // finish our setup, and then push the streams into ourselves to start the\n    // data flow\n    super()\n    this.#events = opts.events\n\n    /* istanbul ignore next - coverage disabled because this is pointless to test here */\n    if (streams.length) {\n      this.push(...streams)\n    }\n  }\n\n  on (event, handler) {\n    if (this.#events.includes(event) && this.#data.has(event)) {\n      return handler(...this.#data.get(event))\n    }\n\n    return super.on(event, handler)\n  }\n\n  emit (event, ...data) {\n    if (this.#events.includes(event)) {\n      this.#data.set(event, data)\n    }\n\n    return super.emit(event, ...data)\n  }\n}\n\nmodule.exports = CachingMinipassPipeline\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAErD,MAAMC,uBAAuB,SAASF,gBAAgB,CAAC;EACrD,CAACG,MAAM,GAAG,EAAE;EACZ,CAACC,IAAI,GAAG,IAAIC,GAAG,EAAE;EAEjBC,WAAW,CAAEC,IAAI,EAAc;IAC7B;IACA;IACA;IACA;IACA;IACA,KAAK,EAAE;IACP,IAAI,CAAC,CAACJ,MAAM,GAAGI,IAAI,CAACJ,MAAM;;IAE1B;IAAA,kCAToBK,OAAO;MAAPA,OAAO;IAAA;IAU3B,IAAIA,OAAO,CAACC,MAAM,EAAE;MAClB,IAAI,CAACC,IAAI,CAAC,GAAGF,OAAO,CAAC;IACvB;EACF;EAEAG,EAAE,CAAEC,KAAK,EAAEC,OAAO,EAAE;IAClB,IAAI,IAAI,CAAC,CAACV,MAAM,CAACW,QAAQ,CAACF,KAAK,CAAC,IAAI,IAAI,CAAC,CAACR,IAAI,CAACW,GAAG,CAACH,KAAK,CAAC,EAAE;MACzD,OAAOC,OAAO,CAAC,GAAG,IAAI,CAAC,CAACT,IAAI,CAACY,GAAG,CAACJ,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,KAAK,CAACD,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;EACjC;EAEAI,IAAI,CAAEL,KAAK,EAAW;IAAA,mCAANR,IAAI;MAAJA,IAAI;IAAA;IAClB,IAAI,IAAI,CAAC,CAACD,MAAM,CAACW,QAAQ,CAACF,KAAK,CAAC,EAAE;MAChC,IAAI,CAAC,CAACR,IAAI,CAACc,GAAG,CAACN,KAAK,EAAER,IAAI,CAAC;IAC7B;IAEA,OAAO,KAAK,CAACa,IAAI,CAACL,KAAK,EAAE,GAAGR,IAAI,CAAC;EACnC;AACF;AAEAe,MAAM,CAACC,OAAO,GAAGlB,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}