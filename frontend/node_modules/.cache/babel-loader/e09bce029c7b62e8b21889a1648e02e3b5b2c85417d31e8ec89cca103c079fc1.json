{"ast":null,"code":"'use strict';\n\nconst events = require('events');\nconst util = require('util');\nconst contentPath = require('./path');\nconst fixOwner = require('../util/fix-owner');\nconst fs = require('@npmcli/fs');\nconst moveFile = require('../util/move-file');\nconst Minipass = require('minipass');\nconst Pipeline = require('minipass-pipeline');\nconst Flush = require('minipass-flush');\nconst path = require('path');\nconst rimraf = util.promisify(require('rimraf'));\nconst ssri = require('ssri');\nconst uniqueFilename = require('unique-filename');\nconst fsm = require('fs-minipass');\nmodule.exports = write;\nasync function write(cache, data) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    algorithms,\n    size,\n    integrity\n  } = opts;\n  if (algorithms && algorithms.length > 1) {\n    throw new Error('opts.algorithms only supports a single algorithm for now');\n  }\n  if (typeof size === 'number' && data.length !== size) {\n    throw sizeError(size, data.length);\n  }\n  const sri = ssri.fromData(data, algorithms ? {\n    algorithms\n  } : {});\n  if (integrity && !ssri.checkData(data, integrity, opts)) {\n    throw checksumError(integrity, sri);\n  }\n  const tmp = await makeTmp(cache, opts);\n  try {\n    await fs.writeFile(tmp.target, data, {\n      flag: 'wx'\n    });\n    await moveToDestination(tmp, cache, sri, opts);\n    return {\n      integrity: sri,\n      size: data.length\n    };\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target);\n    }\n  }\n}\nmodule.exports.stream = writeStream;\n\n// writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\nclass CacacheWriteStream extends Flush {\n  constructor(cache, opts) {\n    super();\n    this.opts = opts;\n    this.cache = cache;\n    this.inputStream = new Minipass();\n    this.inputStream.on('error', er => this.emit('error', er));\n    this.inputStream.on('drain', () => this.emit('drain'));\n    this.handleContentP = null;\n  }\n  write(chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(this.inputStream, this.cache, this.opts);\n    }\n    return this.inputStream.write(chunk, encoding, cb);\n  }\n  flush(cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty');\n        e.code = 'ENODATA';\n        // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n        return Promise.reject(e).catch(cb);\n      }\n      // eslint-disable-next-line promise/catch-or-return\n      this.handleContentP.then(res => {\n        res.integrity && this.emit('integrity', res.integrity);\n        // eslint-disable-next-line promise/always-return\n        res.size !== null && this.emit('size', res.size);\n        cb();\n      }, er => cb(er));\n    });\n  }\n}\nfunction writeStream(cache) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new CacacheWriteStream(cache, opts);\n}\nasync function handleContent(inputStream, cache, opts) {\n  const tmp = await makeTmp(cache, opts);\n  try {\n    const res = await pipeToTmp(inputStream, cache, tmp.target, opts);\n    await moveToDestination(tmp, cache, res.integrity, opts);\n    return res;\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target);\n    }\n  }\n}\nasync function pipeToTmp(inputStream, cache, tmpTarget, opts) {\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx'\n  });\n  if (opts.integrityEmitter) {\n    // we need to create these all simultaneously since they can fire in any order\n    const [integrity, size] = await Promise.all([events.once(opts.integrityEmitter, 'integrity').then(res => res[0]), events.once(opts.integrityEmitter, 'size').then(res => res[0]), new Pipeline(inputStream, outStream).promise()]);\n    return {\n      integrity,\n      size\n    };\n  }\n  let integrity;\n  let size;\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size\n  });\n  hashStream.on('integrity', i => {\n    integrity = i;\n  });\n  hashStream.on('size', s => {\n    size = s;\n  });\n  const pipeline = new Pipeline(inputStream, hashStream, outStream);\n  await pipeline.promise();\n  return {\n    integrity,\n    size\n  };\n}\nasync function makeTmp(cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix);\n  await fixOwner.mkdirfix(cache, path.dirname(tmpTarget));\n  return {\n    target: tmpTarget,\n    moved: false\n  };\n}\nasync function moveToDestination(tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri);\n  const destDir = path.dirname(destination);\n  await fixOwner.mkdirfix(cache, destDir);\n  await moveFile(tmp.target, destination);\n  tmp.moved = true;\n  await fixOwner.chownr(cache, destination);\n}\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction checksumError(expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`);\n  err.code = 'EINTEGRITY';\n  err.expected = expected;\n  err.found = found;\n  return err;\n}","map":{"version":3,"names":["events","require","util","contentPath","fixOwner","fs","moveFile","Minipass","Pipeline","Flush","path","rimraf","promisify","ssri","uniqueFilename","fsm","module","exports","write","cache","data","opts","algorithms","size","integrity","length","Error","sizeError","sri","fromData","checkData","checksumError","tmp","makeTmp","writeFile","target","flag","moveToDestination","moved","stream","writeStream","CacacheWriteStream","constructor","inputStream","on","er","emit","handleContentP","chunk","encoding","cb","handleContent","flush","end","e","code","Promise","reject","catch","then","res","pipeToTmp","tmpTarget","outStream","WriteStream","flags","integrityEmitter","all","once","promise","hashStream","integrityStream","i","s","pipeline","join","tmpPrefix","mkdirfix","dirname","destination","destDir","chownr","expected","found","err"],"sources":["/Users/altafziya/Desktop/new project/ak collection/frontend/node_modules/cacache/lib/content/write.js"],"sourcesContent":["'use strict'\n\nconst events = require('events')\nconst util = require('util')\n\nconst contentPath = require('./path')\nconst fixOwner = require('../util/fix-owner')\nconst fs = require('@npmcli/fs')\nconst moveFile = require('../util/move-file')\nconst Minipass = require('minipass')\nconst Pipeline = require('minipass-pipeline')\nconst Flush = require('minipass-flush')\nconst path = require('path')\nconst rimraf = util.promisify(require('rimraf'))\nconst ssri = require('ssri')\nconst uniqueFilename = require('unique-filename')\nconst fsm = require('fs-minipass')\n\nmodule.exports = write\n\nasync function write (cache, data, opts = {}) {\n  const { algorithms, size, integrity } = opts\n  if (algorithms && algorithms.length > 1) {\n    throw new Error('opts.algorithms only supports a single algorithm for now')\n  }\n\n  if (typeof size === 'number' && data.length !== size) {\n    throw sizeError(size, data.length)\n  }\n\n  const sri = ssri.fromData(data, algorithms ? { algorithms } : {})\n  if (integrity && !ssri.checkData(data, integrity, opts)) {\n    throw checksumError(integrity, sri)\n  }\n\n  const tmp = await makeTmp(cache, opts)\n  try {\n    await fs.writeFile(tmp.target, data, { flag: 'wx' })\n    await moveToDestination(tmp, cache, sri, opts)\n    return { integrity: sri, size: data.length }\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target)\n    }\n  }\n}\n\nmodule.exports.stream = writeStream\n\n// writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\nclass CacacheWriteStream extends Flush {\n  constructor (cache, opts) {\n    super()\n    this.opts = opts\n    this.cache = cache\n    this.inputStream = new Minipass()\n    this.inputStream.on('error', er => this.emit('error', er))\n    this.inputStream.on('drain', () => this.emit('drain'))\n    this.handleContentP = null\n  }\n\n  write (chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(\n        this.inputStream,\n        this.cache,\n        this.opts\n      )\n    }\n    return this.inputStream.write(chunk, encoding, cb)\n  }\n\n  flush (cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty')\n        e.code = 'ENODATA'\n        // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n        return Promise.reject(e).catch(cb)\n      }\n      // eslint-disable-next-line promise/catch-or-return\n      this.handleContentP.then(\n        (res) => {\n          res.integrity && this.emit('integrity', res.integrity)\n          // eslint-disable-next-line promise/always-return\n          res.size !== null && this.emit('size', res.size)\n          cb()\n        },\n        (er) => cb(er)\n      )\n    })\n  }\n}\n\nfunction writeStream (cache, opts = {}) {\n  return new CacacheWriteStream(cache, opts)\n}\n\nasync function handleContent (inputStream, cache, opts) {\n  const tmp = await makeTmp(cache, opts)\n  try {\n    const res = await pipeToTmp(inputStream, cache, tmp.target, opts)\n    await moveToDestination(\n      tmp,\n      cache,\n      res.integrity,\n      opts\n    )\n    return res\n  } finally {\n    if (!tmp.moved) {\n      await rimraf(tmp.target)\n    }\n  }\n}\n\nasync function pipeToTmp (inputStream, cache, tmpTarget, opts) {\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx',\n  })\n\n  if (opts.integrityEmitter) {\n    // we need to create these all simultaneously since they can fire in any order\n    const [integrity, size] = await Promise.all([\n      events.once(opts.integrityEmitter, 'integrity').then(res => res[0]),\n      events.once(opts.integrityEmitter, 'size').then(res => res[0]),\n      new Pipeline(inputStream, outStream).promise(),\n    ])\n    return { integrity, size }\n  }\n\n  let integrity\n  let size\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size,\n  })\n  hashStream.on('integrity', i => {\n    integrity = i\n  })\n  hashStream.on('size', s => {\n    size = s\n  })\n\n  const pipeline = new Pipeline(inputStream, hashStream, outStream)\n  await pipeline.promise()\n  return { integrity, size }\n}\n\nasync function makeTmp (cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)\n  await fixOwner.mkdirfix(cache, path.dirname(tmpTarget))\n  return {\n    target: tmpTarget,\n    moved: false,\n  }\n}\n\nasync function moveToDestination (tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri)\n  const destDir = path.dirname(destination)\n\n  await fixOwner.mkdirfix(cache, destDir)\n  await moveFile(tmp.target, destination)\n  tmp.moved = true\n  await fixOwner.chownr(cache, destination)\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction checksumError (expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`)\n  err.code = 'EINTEGRITY'\n  err.expected = expected\n  err.found = found\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}