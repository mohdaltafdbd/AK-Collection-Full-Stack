{"ast":null,"code":"'use strict';\n\nconst fs = require('@npmcli/fs');\nconst fsm = require('fs-minipass');\nconst ssri = require('ssri');\nconst contentPath = require('./path');\nconst Pipeline = require('minipass-pipeline');\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nasync function read(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  const {\n    stat,\n    cpath,\n    sri\n  } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath);\n    return {\n      stat,\n      cpath,\n      sri\n    };\n  });\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size);\n  }\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n  }\n  const data = await fs.readFile(cpath, {\n    encoding: null\n  });\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath);\n  }\n  return data;\n}\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\nmodule.exports.sync = readSync;\nfunction readSync(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, {\n      encoding: null\n    });\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length);\n    }\n    if (ssri.checkData(data, sri)) {\n      return data;\n    }\n    throw integrityError(sri, cpath);\n  });\n}\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const {\n      stat,\n      cpath,\n      sri\n    } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath);\n      return {\n        stat,\n        cpath,\n        sri\n      };\n    });\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n    return readPipeline(cpath, stat.size, sri, stream);\n  }).catch(err => stream.emit('error', err));\n  return stream;\n}\nmodule.exports.copy = copy;\nmodule.exports.copy.sync = copySync;\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nasync function hasContent(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    });\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false;\n    }\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err;\n      } else {\n        return false;\n      }\n    }\n  }\n}\nmodule.exports.hasContent.sync = hasContentSync;\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\nasync function withContentSri(cache, integrity, fn) {\n  const sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async meta => {\n      try {\n        return await withContentSri(cache, meta, fn);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n            code: 'ENOENT'\n          });\n        }\n        return err;\n      }\n    }));\n    // Return the first non error if it is found\n    const result = results.find(r => !(r instanceof Error));\n    if (result) {\n      return result;\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find(r => r.code === 'ENOENT');\n    if (enoentError) {\n      throw enoentError;\n    }\n\n    // Throw generic error\n    throw results.find(r => r instanceof Error);\n  }\n}\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n    throw lastErr;\n  }\n}\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["fs","require","fsm","ssri","contentPath","Pipeline","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","stat","cpath","sri","withContentSri","sizeError","readPipeline","concat","data","readFile","encoding","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","Promise","resolve","then","emit","catch","err","copy","copySync","dest","copyFile","copyFileSync","hasContent","code","process","platform","hasContentSync","statSync","fn","parse","algo","pickAlgorithm","digests","results","all","map","meta","Object","assign","Error","toString","result","find","r","enoentError","lastErr","expected","found","path"],"sources":["/Users/altafziya/Desktop/new project/ak collection/frontend/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst fs = require('@npmcli/fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nasync function read (cache, integrity, opts = {}) {\n  const { size } = opts\n  const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath)\n    return { stat, cpath, sri }\n  })\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size)\n  }\n\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n  }\n\n  const data = await fs.readFile(cpath, { encoding: null })\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath)\n  }\n\n  return data\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, { encoding: null })\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length)\n    }\n\n    if (ssri.checkData(data, sri)) {\n      return data\n    }\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath)\n      return { stat, cpath, sri }\n    })\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size))\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream)\n  }).catch(err => stream.emit('error', err))\n\n  return stream\n}\n\nmodule.exports.copy = copy\nmodule.exports.copy.sync = copySync\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nasync function hasContent (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath)\n      return { size: stat.size, sri, stat }\n    })\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false\n    }\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err\n        } else {\n          return false\n        }\n      }\n    }\n  })\n}\n\nasync function withContentSri (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async (meta) => {\n      try {\n        return await withContentSri(cache, meta, fn)\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(\n            new Error('No matching content found for ' + sri.toString()),\n            { code: 'ENOENT' }\n          )\n        }\n        return err\n      }\n    }))\n    // Return the first non error if it is found\n    const result = results.find((r) => !(r instanceof Error))\n    if (result) {\n      return result\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find((r) => r.code === 'ENOENT')\n    if (enoentError) {\n      throw enoentError\n    }\n\n    // Throw generic error\n    throw results.find((r) => r instanceof Error)\n  }\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}