{"ast":null,"code":"'use strict';\n\nconst index = require('./entry-index');\nconst memo = require('./memoization');\nconst write = require('./content/write');\nconst Flush = require('minipass-flush');\nconst {\n  PassThrough\n} = require('minipass-collect');\nconst Pipeline = require('minipass-pipeline');\nconst putOpts = opts => ({\n  algorithms: ['sha512'],\n  ...opts\n});\nmodule.exports = putData;\nasync function putData(cache, key, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    memoize\n  } = opts;\n  opts = putOpts(opts);\n  const res = await write(cache, data, opts);\n  const entry = await index.insert(cache, key, res.integrity, {\n    ...opts,\n    size: res.size\n  });\n  if (memoize) {\n    memo.put(cache, entry, data, opts);\n  }\n  return res.integrity;\n}\nmodule.exports.stream = putStream;\nfunction putStream(cache, key) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    memoize\n  } = opts;\n  opts = putOpts(opts);\n  let integrity;\n  let size;\n  let error;\n  let memoData;\n  const pipeline = new Pipeline();\n  // first item in the pipeline is the memoizer, because we need\n  // that to end first and get the collected data.\n  if (memoize) {\n    const memoizer = new PassThrough().on('collect', data => {\n      memoData = data;\n    });\n    pipeline.push(memoizer);\n  }\n\n  // contentStream is a write-only, not a passthrough\n  // no data comes out of it.\n  const contentStream = write.stream(cache, opts).on('integrity', int => {\n    integrity = int;\n  }).on('size', s => {\n    size = s;\n  }).on('error', err => {\n    error = err;\n  });\n  pipeline.push(contentStream);\n\n  // last but not least, we write the index and emit hash and size,\n  // and memoize if we're doing that\n  pipeline.push(new Flush({\n    async flush() {\n      if (!error) {\n        const entry = await index.insert(cache, key, integrity, {\n          ...opts,\n          size\n        });\n        if (memoize && memoData) {\n          memo.put(cache, entry, memoData, opts);\n        }\n        pipeline.emit('integrity', integrity);\n        pipeline.emit('size', size);\n      }\n    }\n  }));\n  return pipeline;\n}","map":{"version":3,"names":["index","require","memo","write","Flush","PassThrough","Pipeline","putOpts","opts","algorithms","module","exports","putData","cache","key","data","memoize","res","entry","insert","integrity","size","put","stream","putStream","error","memoData","pipeline","memoizer","on","push","contentStream","int","s","err","flush","emit"],"sources":["/Users/altafziya/Desktop/new project/ak collection/frontend/node_modules/cacache/lib/put.js"],"sourcesContent":["'use strict'\n\nconst index = require('./entry-index')\nconst memo = require('./memoization')\nconst write = require('./content/write')\nconst Flush = require('minipass-flush')\nconst { PassThrough } = require('minipass-collect')\nconst Pipeline = require('minipass-pipeline')\n\nconst putOpts = (opts) => ({\n  algorithms: ['sha512'],\n  ...opts,\n})\n\nmodule.exports = putData\n\nasync function putData (cache, key, data, opts = {}) {\n  const { memoize } = opts\n  opts = putOpts(opts)\n  const res = await write(cache, data, opts)\n  const entry = await index.insert(cache, key, res.integrity, { ...opts, size: res.size })\n  if (memoize) {\n    memo.put(cache, entry, data, opts)\n  }\n\n  return res.integrity\n}\n\nmodule.exports.stream = putStream\n\nfunction putStream (cache, key, opts = {}) {\n  const { memoize } = opts\n  opts = putOpts(opts)\n  let integrity\n  let size\n  let error\n\n  let memoData\n  const pipeline = new Pipeline()\n  // first item in the pipeline is the memoizer, because we need\n  // that to end first and get the collected data.\n  if (memoize) {\n    const memoizer = new PassThrough().on('collect', data => {\n      memoData = data\n    })\n    pipeline.push(memoizer)\n  }\n\n  // contentStream is a write-only, not a passthrough\n  // no data comes out of it.\n  const contentStream = write.stream(cache, opts)\n    .on('integrity', (int) => {\n      integrity = int\n    })\n    .on('size', (s) => {\n      size = s\n    })\n    .on('error', (err) => {\n      error = err\n    })\n\n  pipeline.push(contentStream)\n\n  // last but not least, we write the index and emit hash and size,\n  // and memoize if we're doing that\n  pipeline.push(new Flush({\n    async flush () {\n      if (!error) {\n        const entry = await index.insert(cache, key, integrity, { ...opts, size })\n        if (memoize && memoData) {\n          memo.put(cache, entry, memoData, opts)\n        }\n        pipeline.emit('integrity', integrity)\n        pipeline.emit('size', size)\n      }\n    },\n  }))\n\n  return pipeline\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}